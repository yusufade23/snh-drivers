// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?
  password  String
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Customer specific fields
  address   String?
  city      String?
  postalCode String?
  
  // Relations
  bookings  Booking[]
  payments  Payment[]
  messages  Message[]

  @@map("users")
}

model Driver {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  phone         String
  password      String
  licenseNumber String   @unique
  isActive      Boolean  @default(true)
  isAvailable   Boolean  @default(false)
  currentLat    Float?
  currentLng    Float?
  lastLocation  DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Driver specific fields
  rating        Float    @default(0)
  totalRides    Int      @default(0)
  totalEarnings Float    @default(0)
  
  // Relations
  vehicle       Vehicle?
  bookings      Booking[]
  earnings      DriverEarning[]

  @@map("drivers")
}

model Vehicle {
  id          String   @id @default(cuid())
  licensePlate String  @unique
  make        String
  model       String
  year        Int
  color       String
  type        VehicleType
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Vehicle specific fields
  capacity    Int
  features    String[] // Array of features like "wifi", "wheelchair", etc.
  
  // Relations
  driver      Driver?
  bookings    Booking[]

  @@map("vehicles")
}

model Booking {
  id          String        @id @default(cuid())
  pickupAddress    String
  dropoffAddress   String
  pickupLat        Float?
  pickupLng        Float?
  dropoffLat       Float?
  dropoffLng       Float?
  distance         Float? // in kilometers
  estimatedPrice  Float
  finalPrice      Float?
  status          BookingStatus @default(PENDING)
  bookingType     BookingType
  specialRequests String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Timing
  pickupTime      DateTime
  actualPickupTime DateTime?
  actualDropoffTime DateTime?

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  driverId  String?
  driver    Driver?  @relation(fields: [driverId], references: [id])
  vehicleId String?
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  payment   Payment?

  @@map("bookings")
}

model Payment {
  id        String        @id @default(cuid())
  amount    Float
  currency  String        @default("EUR")
  status    PaymentStatus @default(PENDING)
  method    PaymentMethod
  stripePaymentId String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookingId String   @unique
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model DriverEarning {
  id        String   @id @default(cuid())
  amount    Float
  bookingId String
  driverId  String
  createdAt DateTime @default(now())

  // Relations
  driver    Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@map("driver_earnings")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  type      MessageType
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// Enums
enum UserRole {
  ADMIN
  CUSTOMER
  DRIVER
}

enum VehicleType {
  ECONOMY
  BUSINESS
  LUXURY
  VAN
  WHEELCHAIR
}

enum BookingStatus {
  PENDING
  CONFIRMED
  ASSIGNED
  PICKED_UP
  IN_TRANSIT
  COMPLETED
  CANCELLED
}

enum BookingType {
  IMMEDIATE
  SCHEDULED
  AIRPORT
  BUSINESS
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  DIGITAL_WALLET
}

enum MessageType {
  SYSTEM
  SUPPORT
  BOOKING_UPDATE
} 